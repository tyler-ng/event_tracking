# Generated by Django 5.2.1 on 2025-05-14 20:04

from django.db import migrations


def migrate_to_normalized_structure(apps, schema_editor):
    """
    Migrate existing data to the new normalized structure.
    This function:
    1. Creates DeviceInfo records for all unique device_id values
    2. Creates LocationInfo records for all unique ip_address values
    3. Updates Event and Session records to link to the new models
    """
    Event = apps.get_model('analytics', 'Event')
    Session = apps.get_model('analytics', 'Session')
    DeviceInfo = apps.get_model('analytics', 'DeviceInfo')
    LocationInfo = apps.get_model('analytics', 'LocationInfo')
    
    # Process DeviceInfo from Events
    print("Migrating device information from events...")
    processed_device_ids = set()
    events = Event.objects.all()
    
    for event in events:
        # Skip if this device was already processed or has no temp_device_id
        if not event.temp_device_id or event.temp_device_id in processed_device_ids:
            continue
            
        # Create a DeviceInfo record
        device = DeviceInfo(
            device_id=event.temp_device_id,
            app_version=event.temp_app_version or '',
            os_name=event.temp_os_name or '',
            os_version=event.temp_os_version or '',
            is_simulator=event.temp_is_simulator,
            is_rooted_device=event.temp_is_rooted_device,
            is_vpn_enabled=event.temp_is_vpn_enabled
        )
        device.save()
        processed_device_ids.add(event.temp_device_id)
    
    # Process DeviceInfo from Sessions
    print("Migrating device information from sessions...")
    sessions = Session.objects.all()
    
    for session in sessions:
        # Skip if this device was already processed or has no temp_device_id
        if not session.temp_device_id or session.temp_device_id in processed_device_ids:
            continue
            
        # Create a DeviceInfo record
        device = DeviceInfo(
            device_id=session.temp_device_id,
            app_version=session.temp_app_version or '',
            os_name=session.temp_os_name or '',
            os_version=session.temp_os_version or '',
            is_simulator=session.temp_is_simulator,
            is_rooted_device=session.temp_is_rooted_device,
            is_vpn_enabled=session.temp_is_vpn_enabled
        )
        device.save()
        processed_device_ids.add(session.temp_device_id)
    
    # Process LocationInfo from Events
    print("Migrating location information from events...")
    processed_ips = set()
    
    for event in events:
        # Skip if this IP was already processed or has no temp_ip_address
        if not event.temp_ip_address or event.temp_ip_address in processed_ips:
            continue
            
        # Create a LocationInfo record
        location = LocationInfo(
            ip_address=event.temp_ip_address,
            city=event.temp_city,
            country=event.temp_country,
            continent=event.temp_continent
        )
        location.save()
        processed_ips.add(event.temp_ip_address)
    
    # Process LocationInfo from Sessions
    print("Migrating location information from sessions...")
    
    for session in sessions:
        # Skip if this IP was already processed or has no temp_ip_address
        if not session.temp_ip_address or session.temp_ip_address in processed_ips:
            continue
            
        # Create a LocationInfo record
        location = LocationInfo(
            ip_address=session.temp_ip_address,
            city=session.temp_city,
            country=session.temp_country,
            continent=session.temp_continent
        )
        location.save()
        processed_ips.add(session.temp_ip_address)
    
    # Update Event records to link to DeviceInfo and LocationInfo
    print("Updating event links to device and location info...")
    
    for event in events:
        if event.temp_device_id:
            try:
                device = DeviceInfo.objects.get(device_id=event.temp_device_id)
                event.device = device
            except DeviceInfo.DoesNotExist:
                pass
                
        if event.temp_ip_address:
            try:
                location = LocationInfo.objects.get(ip_address=event.temp_ip_address)
                event.location = location
            except LocationInfo.DoesNotExist:
                pass
                
        event.save()
    
    # Update Session records to link to DeviceInfo and LocationInfo
    print("Updating session links to device and location info...")
    
    for session in sessions:
        if session.temp_device_id:
            try:
                device = DeviceInfo.objects.get(device_id=session.temp_device_id)
                session.device = device
            except DeviceInfo.DoesNotExist:
                pass
                
        if session.temp_ip_address:
            try:
                location = LocationInfo.objects.get(ip_address=session.temp_ip_address)
                session.location = location
            except LocationInfo.DoesNotExist:
                pass
                
        session.save()
    
    # Link Events to Sessions
    print("Linking events to sessions...")
    
    # This would need a more complex matching logic in a real system
    # For this example, we match events to sessions based on distinct_id and timestamp
    for event in events:
        matching_sessions = Session.objects.filter(
            distinct_id=event.distinct_id,
            start_time__lte=event.timestamp
        ).order_by('-start_time')
        
        if matching_sessions.exists():
            session = matching_sessions.first()
            if not session.end_time or event.timestamp <= session.end_time:
                event.session = session
                event.save()


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by moving data back to the original fields.
    """
    Event = apps.get_model('analytics', 'Event')
    Session = apps.get_model('analytics', 'Session')
    
    # Copy device info back to Event records
    print("Reverting event device info...")
    for event in Event.objects.all():
        if event.device:
            event.temp_device_id = event.device.device_id
            event.temp_app_version = event.device.app_version
            event.temp_os_name = event.device.os_name
            event.temp_os_version = event.device.os_version
            event.temp_is_simulator = event.device.is_simulator
            event.temp_is_rooted_device = event.device.is_rooted_device
            event.temp_is_vpn_enabled = event.device.is_vpn_enabled
            
        if event.location:
            event.temp_ip_address = event.location.ip_address
            event.temp_city = event.location.city
            event.temp_country = event.location.country
            event.temp_continent = event.location.continent
            
        event.save()
    
    # Copy device info back to Session records
    print("Reverting session device info...")
    for session in Session.objects.all():
        if session.device:
            session.temp_device_id = session.device.device_id
            session.temp_app_version = session.device.app_version
            session.temp_os_name = session.device.os_name
            session.temp_os_version = session.device.os_version
            session.temp_is_simulator = session.device.is_simulator
            session.temp_is_rooted_device = session.device.is_rooted_device
            session.temp_is_vpn_enabled = session.device.is_vpn_enabled
            
        if session.location:
            session.temp_ip_address = session.location.ip_address
            session.temp_city = session.location.city
            session.temp_country = session.location.country
            session.temp_continent = session.location.continent
            
        session.save()


class Migration(migrations.Migration):

    dependencies = [
        ('analytics', '0004_normalize_device_and_location_data'),
    ]

    operations = [
        migrations.RunPython(migrate_to_normalized_structure, reverse_migration),
    ]
